# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IaK6CyCf1hGX9WZIydOEPvU9sZ7rk_KN
"""

import streamlit as st
import torch
from torchvision.utils import make_grid
import matplotlib.pyplot as plt
import torch.nn as nn
import torch.nn.functional as F

# Define the CVAE model inline
class CVAE(nn.Module):
    def __init__(self):
        super(CVAE, self).__init__()
        self.fc1 = nn.Linear(28*28 + 10, 256)
        self.fc21 = nn.Linear(256, 20)
        self.fc22 = nn.Linear(256, 20)
        self.fc3 = nn.Linear(20 + 10, 256)
        self.fc4 = nn.Linear(256, 28*28)

    def encode(self, x, y):
        inputs = torch.cat([x.view(-1, 28*28), y], dim=1)
        h1 = F.relu(self.fc1(inputs))
        return self.fc21(h1), self.fc22(h1)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5*logvar)
        eps = torch.randn_like(std)
        return mu + eps*std

    def decode(self, z, y):
        inputs = torch.cat([z, y], dim=1)
        h3 = F.relu(self.fc3(inputs))
        return torch.sigmoid(self.fc4(h3))

    def forward(self, x, y):
        mu, logvar = self.encode(x, y)
        z = self.reparameterize(mu, logvar)
        return self.decode(z, y), mu, logvar

# Inline one-hot function too
def one_hot(labels, num_classes=10):
    return F.one_hot(labels, num_classes=num_classes).float()

st.set_page_config(page_title="Digit Generator", layout="centered")
st.title("MNIST Digit Generator")

device = torch.device("cpu")
model = CVAE().to(device)
model.load_state_dict(torch.load("cvae_mnist.pth", map_location=device))
model.eval()

digit = st.selectbox("Choose a digit (0â€“9)", list(range(10)))

if st.button("Generate Images"):
    y = torch.tensor([digit]*5)
    y_onehot = one_hot(y).to(device)
    z = torch.randn(5, 20)
    with torch.no_grad():
        images = model.decode(z, y_onehot).view(-1, 1, 28, 28)

    grid = make_grid(images, nrow=5, padding=2)
    plt.figure(figsize=(10, 2))
    plt.axis("off")
    plt.imshow(grid.permute(1, 2, 0).squeeze(), cmap="gray")
    st.pyplot(plt)
